{"version":3,"sources":["api/api.ts","store/actions.ts","store/selectors.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostList/PostList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","request","specify","a","fetch","result","json","name","email","body","postId","method","headers","JSON","stringify","SET_POSTS","ADD_POST","SET_USER_ID","SET_ALL_USERS","SET_COMMENT_LIST","SET_SELECT_POST","SET_SINGLE_SELECT_POST","SET_NEED_FOR_UPDATE","setPostsAction","payload","type","setSelectedPostId","setSingleSelectedPost","setNeedToUpdate","getPostsSelector","state","posts","getUserIdSelector","currentUserId","getAllUsersSelector","allUsers","getCommentsSelector","commentsList","getPostIdSelector","selectedPostId","getSinglePostSelector","selectedPost","getNeedToUpdate","needToUpdate","NewCommentForm","useSelector","useState","setName","setEmail","commentBody","setCommentBody","className","onSubmit","event","preventDefault","postComment","placeholder","value","onChange","target","PostDetails","dispatch","useDispatch","currPost","isVisibleComments","setCommentsVisibility","useEffect","fetcher","commentList","title","onClick","map","singleComment","id","PostList","currUserId","filteredResult","filter","el","userId","App","users","Number","singleUser","initialState","store","createStore","action","todos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d2e9f60.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (specify : string) => {\n  const result = await fetch(`${BASE_URL}/${specify}`);\n\n  return result.json();\n};\n\nexport function deleteRequest(specify : string) : Promise<Response> {\n  const result = fetch(`${BASE_URL}/${specify}`, { method: 'DELETE' });\n\n  return result;\n}\n\nexport async function postComment(\n  name : string, email : string, body : string, postId: number,\n) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import {\n  Action, Comment, Post, User,\n} from '../react-app-env';\n\nexport const SET_POSTS = 'SET_TODOS';\nexport const ADD_POST = 'ADD_POST';\nexport const SET_USER_ID = 'SET_USER';\nexport const SET_ALL_USERS = 'SET_ALL_USERS';\nexport const SET_COMMENT_LIST = 'SET_COMMENT_LIST';\nexport const SET_SELECT_POST = 'SET_SELECT_POST';\nexport const SET_SINGLE_SELECT_POST = 'SET_SINGLE_SELECT_POST';\nexport const SET_NEED_FOR_UPDATE = 'SET_NEED_FOR_UPDATE';\n\nexport const setPostsAction = (payload: Post[]): Action => ({\n  type: SET_POSTS,\n  payload,\n});\n\nexport const addPostAction = (payload: Post): Action => ({\n  type: ADD_POST,\n  payload,\n});\n\nexport const setUserIdAction = (payload: number): Action => ({\n  type: SET_USER_ID,\n  payload,\n});\n\nexport const setAllUsersAction = (payload: User[]): Action => ({\n  type: SET_ALL_USERS,\n  payload,\n});\n\nexport const setCommentListAction = (payload: Comment[]): Action => ({\n  type: SET_COMMENT_LIST,\n  payload,\n});\n\nexport const setSelectedPostId = (payload: number | null): Action => ({\n  type: SET_SELECT_POST,\n  payload,\n});\n\nexport const setSingleSelectedPost = (payload: Post | null): Action => ({\n  type: SET_SINGLE_SELECT_POST,\n  payload,\n});\n\nexport const setNeedToUpdate = (payload: boolean): Action => ({\n  type: SET_NEED_FOR_UPDATE,\n  payload,\n});\n","import { State } from '../react-app-env';\n\nexport const getPostsSelector = (state: State) => state.posts;\n\nexport const getUserIdSelector = (state: State) => state.currentUserId;\n\nexport const getAllUsersSelector = (state: State) => state.allUsers;\n\nexport const getCommentsSelector = (state: State) => state.commentsList;\n\nexport const getPostIdSelector = (state: State) => state.selectedPostId;\n\nexport const getSinglePostSelector = (state: State) => state.selectedPost;\n\nexport const getNeedToUpdate = (state: State) => state.needToUpdate;\n","import './NewCommentForm.scss';\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getNeedToUpdate, getPostIdSelector } from '../../store/selectors';\nimport { setNeedToUpdate } from '../../store/actions';\nimport { postComment } from '../../api/api';\n\nexport const NewCommentForm: React.FC = () => {\n  const needToUpdate = useSelector(getNeedToUpdate);\n  const postId = useSelector(getPostIdSelector);\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (postId !== null) {\n          postComment(name, email, commentBody, postId);\n        }\n\n        setNeedToUpdate(!needToUpdate);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={name}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          value={email}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={commentBody}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setCommentBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteRequest, request } from '../../api/api';\nimport {\n  setCommentListAction,\n  setNeedToUpdate,\n  setSingleSelectedPost,\n} from '../../store/actions';\nimport {\n  getCommentsSelector,\n  getNeedToUpdate,\n  getPostIdSelector,\n  getSinglePostSelector,\n} from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails : React.FC = () => {\n  const dispatch = useDispatch();\n  const commentsList = useSelector(getCommentsSelector);\n  const postId = useSelector(getPostIdSelector);\n  const currPost = useSelector(getSinglePostSelector);\n  const needToUpdate = useSelector(getNeedToUpdate);\n\n  const [isVisibleComments, setCommentsVisibility] = useState(true);\n\n  useEffect(() => {\n    const fetcher = async () => {\n      if (postId !== null) {\n        const commentList = await request(`comments?postId=${postId}`);\n        const selectedPost = await request(`posts/${postId}`);\n\n        dispatch(setCommentListAction(commentList));\n        dispatch(setSingleSelectedPost(selectedPost));\n      }\n    };\n\n    fetcher();\n  }, [postId, needToUpdate]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post Details</h2>\n      {currPost !== null && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{currPost.title}</p>\n          </section>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setCommentsVisibility(!isVisibleComments);\n            }}\n          >\n            Hide comments\n          </button>\n\n        </>\n      )}\n      {isVisibleComments && (\n        <ul className=\"PostDetails__list\">\n          {commentsList.map(singleComment => (\n            <li key={singleComment.id} className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={async () => {\n                  await deleteRequest(`comments/${singleComment.id}`);\n                  dispatch(setNeedToUpdate(!needToUpdate));\n                }}\n              >\n                X\n              </button>\n              <p>{singleComment.body}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      <NewCommentForm />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { request } from '../../api/api';\nimport { Post } from '../../react-app-env';\nimport { setPostsAction, setSelectedPostId } from '../../store/actions';\nimport {\n  getPostIdSelector, getPostsSelector, getUserIdSelector,\n} from '../../store/selectors';\nimport './PostList.scss';\n\nexport const PostList : React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPostsSelector);\n  const currUserId = useSelector(getUserIdSelector);\n  const postId = useSelector(getPostIdSelector);\n\n  useEffect(() => {\n    const fetcher = async () => {\n      const result = await request('/posts');\n\n      if (currUserId === 0) {\n        dispatch(setPostsAction(result));\n      } else {\n        const filteredResult = result.filter(\n          (el : Post) => el.userId === currUserId,\n        );\n\n        dispatch(setPostsAction(filteredResult));\n      }\n    };\n\n    fetcher();\n  }, [currUserId]);\n\n  return (\n    <div className=\"PostList\">\n      <ul className=\"PostList__list\">\n        {posts.map(el => (\n          <li className=\"PostList__item\" key={el.id}>\n            <div>\n              <b>\n                {`User #${el.userId}`}\n              </b>\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => {\n                  if (postId !== el.id) {\n                    dispatch(setSelectedPostId(el.id));\n                  } else {\n                    dispatch(setSelectedPostId(null));\n                  }\n                }}\n              >\n                {(postId === el.id) && (\n                  <>Close</>\n                )}\n                {(postId !== el.id) && (\n                  <>Open</>\n                )}\n              </button>\n            </div>\n            {el.title}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { request } from './api/api';\nimport './App.scss';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { PostList } from './components/PostList/PostList';\nimport { setAllUsersAction, setUserIdAction } from './store/actions';\nimport { getAllUsersSelector } from './store/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(getAllUsersSelector);\n\n  useEffect(() => {\n    const fetcher = async () => {\n      const result = await request('/users');\n\n      dispatch(setAllUsersAction(result));\n    };\n\n    fetcher();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              dispatch(setUserIdAction(Number(event.target.value)));\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(singleUser => (\n              <option\n                key={singleUser.id}\n                value={singleUser.id}\n              >\n                {singleUser.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport {\n  SET_POSTS,\n  ADD_POST,\n  SET_USER_ID,\n  SET_ALL_USERS,\n  SET_COMMENT_LIST,\n  SET_SELECT_POST,\n  SET_SINGLE_SELECT_POST,\n  SET_NEED_FOR_UPDATE,\n} from './actions';\n\nconst initialState : State = {\n  posts: [],\n  selectedPostId: null,\n  currentUserId: 0,\n  allUsers: [],\n  commentsList: [],\n  selectedPost: null,\n  needToUpdate: false,\n};\n\nconst reducer = (state = initialState, action : Action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        todos: [...state.posts, action.payload],\n      };\n\n    case SET_USER_ID:\n      return {\n        ...state,\n        currentUserId: action.payload,\n      };\n    case SET_ALL_USERS:\n      return {\n        ...state,\n        allUsers: action.payload,\n      };\n\n    case SET_COMMENT_LIST:\n      return {\n        ...state,\n        commentsList: action.payload,\n      };\n    case SET_SELECT_POST:\n      return {\n        ...state,\n        selectedPostId: action.payload,\n      };\n\n    case SET_SINGLE_SELECT_POST:\n      return {\n        ...state,\n        selectedPost: action.payload,\n      };\n\n    case SET_NEED_FOR_UPDATE:\n      return {\n        ...state,\n        needToUpdate: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}